//Ques 1 : (link--> https://leetcode.com/problems/special-array-i/)
//         time : O(n) space : O(1)

//Approach : diff of no. wit same parity is divisible by 2
class Solution {
    public boolean isArraySpecial(int[] nums) {
        for(int i = 0; i < nums.length-1; i++){
            if(Math.abs(nums[i+1]-nums[i]) % 2 == 0) return false;
        }
        return true;
    }
}

//Ques 2 : (link--> https://leetcode.com/problems/monotonic-array/)
//         time : O(n) space : O(1)
 
class Solution {
    public boolean isMonotonic(int[] nums) {
        Boolean dec = true, inc = true;
        for(int i = 0; i < nums.length-1; i++){
            if(nums[i] < nums[i+1])
            {
                dec = false;
                break;
            }
        }
        for(int i = 0; i < nums.length-1; i++){
            if(nums[i] > nums[i+1])
            {
                inc = false;
                break;
            }
        }
        return (inc || dec);
    }
}

//Ques 3 : (link--> https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/)
//         time : O(n) space : O(1)

//Approach : in rotated array it inc then dec at only one pt such that the sorted array after that pt has elements < the nums[0]
class Solution {
    public boolean check(int[] nums) {
        int j = 0;
        int k = 0;
        for(int i = 0; i < nums.length-1; i++){
            if(nums[i] > nums[i+1]){
                j = i;
                k++;
            }
        } 
        j++;
        if(j < nums.length && k == 1){
            if(nums[j] <= nums[0] && nums[nums.length-1] <= nums[0]){
                return true;
            }
        }
        else if(k == 0) return true;
        return false;
    }
}