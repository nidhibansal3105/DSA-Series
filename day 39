// Ques 1 : (link--> https://leetcode.com/problems/find-all-duplicates-in-an-array/)

// method 1
//time : O(n) space : O(n)
//Approach : make a freq array and put up condition while iterating that if the arrray at the index of nums[i] already contains something than yes its the duplicate one
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        int[] freq = new int[nums.length+1];
        List<Integer> ans = new ArrayList<>();
        freq[nums[0]] = 1;
        for(int i = 1; i < nums.length; i++){
            if(freq[nums[i]] == 1) ans.add(nums[i]);
            else freq[nums[i]] = 1;
        }
        return ans;
    }
}
// method 2
// time : O(n) space : O(1) except the ans List
// Approach : negation 
// just make the index of (nums[i]-1) negative then if while further iterating if you encounters the negative elelemt then that particular element already exists so yes its the duplicate ones
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> ans = new ArrayList<>();
        for(int i = 0; i < nums.length; i++){
            int k = nums[Math.abs(nums[i])-1];
            if(k < 0) ans.add(Math.abs(nums[i]));
            else  nums[Math.abs(nums[i])-1] *= -1;
        }
        return ans;
    }
}

//Ques 2 : (link--> https://leetcode.com/problems/count-number-of-bad-pairs/)
//         time : O(n) space : O(n)

//Approach : just think it of as (nums[i]-i != nums[j]-j) irrespective of thinking it as (j-i == numss[j]-nums[i])
class Solution {
    public long countBadPairs(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++){
            map.put(nums[i]-i, map.getOrDefault(nums[i]-i, 0)+1);
        }
        long count = 0;
        for(int freq : map.values()){
            if(freq != 1)count += ((long)freq*((long)freq-1))/2;
        }
        long n = nums.length;
        long total = (n*(n-1))/2;
        return (total-count);
    }
}