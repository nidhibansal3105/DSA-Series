//Ques 1 : (link--> https://leetcode.com/problems/shortest-palindrome/)
//         time : O(n) space : O(n)

//Approach : KMP algorithm
class Solution {
    public String shortestPalindrome(String s) {
        String str = s + "#" + new StringBuilder(s).reverse().toString();
        int[] pi = new int[str.length()];
        int i = 1;
        int j = 0;
        while(i < str.length()){
            if(str.charAt(i) == str.charAt(j)){
                j++;
                pi[i] = j;
                i++;
            }
            else{
                if(j > 0){
                    j = pi[j-1];
                }
                else{
                    pi[i] = j;
                    i++;
                }
            }
        }
        int index = pi[str.length()-1];
        return new StringBuilder(s.substring(index)).reverse() + s;
    }
}