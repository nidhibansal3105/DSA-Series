//Ques 1 : (link--> https://leetcode.com/problems/merge-sorted-array/)
//         tiem : O(n+m) sapce : O(n+m)

//Approach : merge two arrays in sorted order
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = 0;
        int j = 0;
        int k = 0;
        int[] dummy = new int[m+n];
        while(i < m && j < n){
            if(nums1[i] <= nums2[j]) dummy[k++] = nums1[i++];
            else dummy[k++] = nums2[j++];
        }
        while(i < m){
            dummy[k++] = nums1[i++];
        }
        while(j < n){
            dummy[k++] = nums2[j++];
        }
        for(int l = 0; l < m+n; l++){
            nums1[l] = dummy[l]; 
        }
    }
}

//Ques 2 : (link--> https://leetcode.com/problems/merge-two-2d-arrays-by-summing-values/submissions/1735923479/)
//         time : O(n+m)  space : (n+m)

//Approach : merge two arrays
class Solution {
    public int[][] mergeArrays(int[][] nums1, int[][] nums2) {
        HashSet<Integer> check = new HashSet<>();
        for(int i = 0; i < nums1.length; i++){
            check.add(nums1[i][0]);
        }
        for(int i = 0; i < nums2.length; i++){
            check.add(nums2[i][0]);
        }
        int[][] ans = new int[check.size()][2];
        int i = 0;
        int j = 0;
        int k = 0;
        while(i < nums1.length && j < nums2.length){
            if(nums1[i][0] < nums2[j][0]){
                ans[k][0] = nums1[i][0];
                ans[k++][1] = nums1[i++][1];
            }
            else if(nums1[i][0] == nums2[j][0]){
                ans[k][0] = nums1[i][0];
                ans[k++][1] = nums1[i++][1] + nums2[j++][1];
            }
            else{
                ans[k][0] = nums2[j][0];
                ans[k++][1] = nums2[j++][1];
            }
        }
        while(i < nums1.length){
            ans[k][0] = nums1[i][0];
            ans[k++][1] = nums1[i++][1];
        }
        while(j < nums2.length){
            ans[k][0] = nums2[j][0];
            ans[k++][1] = nums2[j++][1];
        }
        return ans;
    }
}

//Ques 3 : (link--> https://leetcode.com/problems/move-zeroes/)
//         time : O(n) space : O(1)

//Approach : keep the track of no. of non-zero elements and then keep them in front of the array nums itself
class Solution {
    public void moveZeroes(int[] nums) {
        int count = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] != 0){
                count++;
                nums[count-1] = nums[i];
            }
        }
        for(int i = count; i < nums.length; i++){
            nums[i] = 0;
        }
    }
}