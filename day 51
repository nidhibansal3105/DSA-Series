//Ques 1 : (link--> https://leetcode.com/problems/sort-array-by-parity/)
//         time: O(n) space : O(1)

// Approach : if you want to move elements in the array use the count keyword
class Solution {
    public int[] sortArrayByParity(int[] nums) {
        int count = 0;
        int i = 0;
        int temp;
        while(i < nums.length){
            if(nums[i]%2 == 0){
                temp = nums[count];
                nums[count] = nums[i];
                nums[i] = temp;
                count++;
            }
            i++;
        }
        return nums;
    }
}

//Ques 2 : (Link--> https://leetcode.com/problems/find-first-palindromic-string-in-the-array/submissions/1739911905/)
//         time : O(n*k)  space : O(1)

//Approach: just make anothere function to check whether the string is palindromic or not if you got the one just return it
class Solution {
    public static boolean isPalindrome(String s){
        int i = 0;
        int j = s.length()-1;
        while(i < j){
            if(s.charAt(i) != s.charAt(j)) return false;
            j--;
            i++;
        }
        return true;
    }
    public String firstPalindrome(String[] words) {
        for(String str : words){
            if(isPalindrome(str)){
                return str;
            }
        }
        return "";
    }
}