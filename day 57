//Ques 1 : (link--> https://leetcode.com/problems/trapping-rain-water/)
//         time : O(n)  space : O(1)

// Approach : just find the right max then till that index kepp iterating and keeping the leftMax and in ans store the water that can be stored above the current bar
class Solution {
    public int trap(int[] height) {
        int maxId = 0;
        int rightMax = 0;
        int leftMax = 0;
        int ans = 0;
        int i = 0;
        for(i  = 0; i < height.length; i++){
            if(rightMax <= height[i]){ 
                maxId = i;
                rightMax = height[i];
            }
        }
        i = 1;
        leftMax = height[i-1];
        while(i < maxId){
            leftMax = Math.max(leftMax, height[i]);
            ans += Math.min(rightMax, leftMax)-height[i];
            i++;
        }
        i = height.length-2;
        leftMax = height[i+1];
        while(i > maxId){
            leftMax = Math.max(leftMax, height[i]);
            ans += Math.min(rightMax, leftMax)-height[i];
            i--;
        }
        return ans;
    }
}

//Ques 2 : (link--> https://leetcode.com/problems/crawler-log-folder/)
//         time : O(n) space : O(1)

//Approach : simple iteration
class Solution {
    public int minOperations(String[] logs) {
        int ans = 0;
        for(String i : logs){
            if(i.equals("../") && ans > 0){
                ans--;
            }
            else if(i.equals("./") || (i.equals("../") && ans == 0)){
                continue;
            }
            else{
                ans++;
            }
        }
        return ans;
    }
}

//Ques 3 : (link--> https://leetcode.com/problems/baseball-game/)
//         time : O(n) space : O(n)

// Approach : simple iterating and matching the strings
class Solution {
    public int calPoints(String[] operations) {
        int n = operations.length;
        int ans = 0;
        Stack<Integer> st = new Stack<>();
        for(String i : operations){
            if(i.equals("D")){
                st.push(st.peek()*2);
            }
            else if(i.equals("C")){
                st.pop();
            }
            else if(i.equals("+")){
                int num1 = st.pop();
                int num2 = st.pop();
                st.push(num2);
                st.push(num1);
                st.push(num2+num1);
            }
            else{
                st.push(Integer.parseInt(i));
            }
        }
        while(!st.isEmpty()){
            ans += st.pop();
        }
        return ans;
    }
}