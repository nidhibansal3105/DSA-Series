//Ques 1 : (link--> https://leetcode.com/problems/can-place-flowers/)
//         time = O(n) space = O(1)

//Approach : "simple iteration"
//            you can iterate the array then when you find the 0 check whether its appropriate to choose to plant or not 
//            if find the appropriate place don't forget to toggle it to 1 and inc the count
class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        if(flowerbed.length == 1){
            if(flowerbed[0] == 1 && n > 0) return false;
            else return true;
        } 
        int count = 0;
        for(int i = 0; i < flowerbed.length; i++){
            int flag = 0;
            if(flowerbed[i] == 0){
                if(i > 0 && i < flowerbed.length-1){
                    if(flowerbed[i-1] == 0 && flowerbed[i+1] == 0) flag = 1;
                }
                else if(i == 0){
                    if(flowerbed[i+1] == 0) flag = 1;
                }
                else{
                    if(flowerbed[i-1] == 0) flag = 1;
                }
            }
            
            if(flag == 1)
            {
                flowerbed[i] = 1;
                count++;
            }
            if(count >= n) return true;
        }
        return false;
    }
}

//Ques 2 : (link --> https://leetcode.com/problems/majority-element/)
//          time = O(nlogn) space = O(1)

//Approach : "sort the array first"
//            iterate through the array and then check if its equal to the value(number corresponding to max occurrence till now)
//            if it doesn't matches then reset the count to one 
//            if count > max then change the max and value
class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        int max = Integer.MIN_VALUE;
        int count = 1;
        int value = 0;
        int i;
        for(i = 1; i < nums.length; i++)
        {
            if(nums[i] != nums[i-1]){
                if(max < count){
                    max = count;
                    value = nums[i-1];
                }
                count = 1;
            }
            else{
                count++;
            }
        }
        if(max < count){
            max = count;
            value = nums[i-1];
        }
        return value;
    }
}

//Ques 3 : (link--> https://leetcode.com/problems/next-greater-element-i/)
//          time = O(n*m) space = O(n)

//Approach : "simple iteration"

//Better Appraoch : "use monotonic stack to store element whenever the element > st.peek() pop it and store it in the map as its next greater"
//                   at the end of loop if there are some elements left then that implies there are no greater element for these so store them in map as (ele, -1)
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int[] ans = new int[nums1.length];
        int flag;
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i = 0; i < nums2.length; i++)
        {
            map.put(nums2[i], i);
        }
        for(int i = 0; i < nums1.length; i++)
        {
            flag = 0;
            for(int j = map.get(nums1[i]); j < nums2.length; j++)
            {
                if(nums1[i] < nums2[j]){
                    ans[i] = nums2[j];
                    flag = 1;
                    break;
                }
            }
            if(flag != 1) ans[i] = -1;
        }
        return ans;
    }
}

//Ques 4 --> link --> (https://leetcode.com/problems/unique-email-addresses/)
//           time - O(n^2) space = O(n)

class Solution {
    public static String normalize(String str){
        int index = str.indexOf('@');
        String ans = "";
        for(int i = 0; i < index; i++)
        {
            if(str.charAt(i) == '+') break;
            if(str.charAt(i) != '.') ans += str.charAt(i);
        }
        for(int i = index; i < str.length(); i++)
        {
            ans += str.charAt(i);
        }
        return ans;
    }

    public int numUniqueEmails(String[] emails) {
        HashSet<String> hs = new HashSet<>();
        for(int i = 0; i < emails.length; i++)
        {
            hs.add(normalize(emails[i]));
        }
        return hs.size();
    }
}