//Ques 1 : (link--> https://leetcode.com/problems/squares-of-a-sorted-array/)
//         time : O(n) space : O(n)

//Approach : if its sorted already then no need to sort it again after squaring all the elements
class Solution {
    public int[] sortedSquares(int[] nums) {
        int[] ans = new int[nums.length];
        int k = 0;
        while(k < nums.length && nums[k] < 0){
            k++;
        }
        int j = k-1;
        int i = 0;
        while(i < nums.length){
            if(j >= 0 && (k >= nums.length || nums[j]*nums[j] <= nums[k]*nums[k])){
                ans[i] = nums[j]*nums[j];
                j--;
            }
            else{
                ans[i] = nums[k]*nums[k];
                k++;
            }
            i++;
        }
        return ans;
    }
}

//Ques 2 : (link--> https://leetcode.com/problems/assign-cookies/)
//         time : O(nlogn) space : O(1)

//Approach :  sort both the array then comapre iteration by iteration and count the no of children can be satisfied
class Solution {
    public int findContentChildren(int[] g, int[] s) {
        Arrays.sort(s);
        Arrays.sort(g);
        int i = 0;
        int j = 0;
        int count = 0;
        while(i < s.length && j < g.length){
            if(s[i] >= g[j]){ 
                count++;
                i++;
                j++;
            }
            else if(s[i] < g[j]){
                i++;
            }
        }
        return count;
    }
}