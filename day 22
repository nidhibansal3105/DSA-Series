//Ques 1 : (link--> https://leetcode.com/problems/brick-wall/)
//         time : O(n^2)  space : O(n^2)

//Approach : make hashmap to store the frequency of the indices 
//           To claculate indices we are required to calculate the prefix sum of row 
//           the index that occurs the most frequently will be apparently our ans
//           if it ocurrs more frequently then the leftover rows will be cut by the line so kreturn the ans as (no.of rows-frequency of more frequent row)
class Solution {
    public int leastBricks(List<List<Integer>> wall) {
        //preparing the count array
        int value = 0;
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i = 0; i < wall.size(); i++){
            value = 0;
            for(int j = 0; j < wall.get(i).size()-1; j++){
                value += wall.get(i).get(j);
                map.put(value, map.getOrDefault(value,0)+1);
            }
        }

        if (map.isEmpty()) return wall.size();

        int min = Integer.MAX_VALUE;
        for (Map.Entry<Integer, Integer> en : map.entrySet()) {
            min = Math.min(min, wall.size()-en.getValue());
        }
        return min;
    }
}

//Ques 2 : (link--> https://leetcode.com/problems/longest-consecutive-sequence/submissions/1683732272/)
//          time : O(nlogn)  space : O(1)

//Approach  : "simple iteration"
//            if the consequetive element is >= by 1 then increase the length by 1 every time
//            if not, iterate back the length to 0 and again start the same process
class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums.length == 0) return 0;
        Arrays.sort(nums);
        int length = 1;
        int max = 0;
        for(int i = 1; i < nums.length; i++){
            if(nums[i-1]+1 == nums[i]){
                length++;
            }
            else if(nums[i-1] == nums[i]){
                continue;
            }
            else{
                max = Math.max(max, length);
                length = 1;
            }
        }
        max = Math.max(max, length);
        return max;
    }
}

//Ques 3 : (link--> https://leetcode.com/problems/valid-sudoku/submissions/1684006534/)
//          time : O(1)  space : O(1)

//Approach: we make hashset set array for rows and columns and boxes
//          matlb har row ka ek hash set jo uss row mein repitition ko check karega
//          if there ocurrs repition then return false
class Solution {
    public boolean isValidSudoku(char[][] board) {
        HashSet<Character>[] row = new HashSet[9];
        HashSet<Character>[] column = new HashSet[9];
        HashSet<Character>[] box = new HashSet[9];

        for (int i = 0; i < 9; i++) {
            row[i] = new HashSet<>();
            column[i] = new HashSet<>();
            box[i] = new HashSet<>();
        }

        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                char value = board[i][j];
                if(value == '.') continue;
                int boxId = (i/3)*3 + (j/3);
                if(box[boxId].contains(value) || row[i].contains(value) || column[j].contains(value))
                    return false;
                row[i].add(value);
                column[j].add(value);
                box[boxId].add(value);
            }
        }
        return true;
    }
}
