//Ques 1 : (link--> https://leetcode.com/problems/set-mismatch/)
//         time: O(n) space : O(1)

//Approach : "negation of index"
class Solution {
    public int[] findErrorNums(int[] nums) {
        int temp;
        int[] ans = new int[2];
        for(int i = 0; i < nums.length; i++)
        {
            if(nums[Math.abs(nums[i])-1] > 0) nums[Math.abs(nums[i])-1] *= -1;
            else ans[0] = Math.abs(nums[i]);
        }
        for(int i = 0; i < nums.length; i++){
            if(nums[i] > 0){ 
                ans[1] = i+1;
                break;
            }
        }
        return ans;
    }
}

//Ques 2 : (link--> https://leetcode.com/problems/first-unique-character-in-a-string/)
//          time : O(n) space : O(1)

//Approach : count the frequency of each letter
//           if it occurs only once then store it in min if less than the previously stored index
//           reuturn min
class Solution {
    public int firstUniqChar(String s) {
        int[] count = new int[26];
        int min = s.length();
        for(char ch : s.toCharArray()){
            count[ch-'a']++;
        }
        for(int i = 0; i < count.length; i++){
            if(count[i] == 1){
                min = Math.min(min, s.indexOf(i+'a'));
            }
        }
        if(min == s.length()) min = -1;
        return min;
    }
}

//Ques 3 : (link--> https://leetcode.com/problems/intersection-of-two-arrays/)
//          time : O(n+m) space : O(n)

//Approach : store every no.from nums1 to hashMap then
//           make an aux array of size of smaller array then store every element of nums2 in it if it is present in map
//           now make another aux array of size of non-zero  entries of prev aux array and store the non-zero entries
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums1.length; i++){
            map.put(nums1[i], 0);
        }
        int k = 0;
        int size = nums1.length < nums2.length ? nums1.length : nums2.length;
        int[] ans = new int[size];
        for(int i = 0; i < nums2.length; i++){
            if(map.containsKey(nums2[i])){
                ans[k] = nums2[i];
                k++;
                map.remove(nums2[i]);
            }
        }
        int[] ans1 = new int[k];
        for(int i = 0; i < k; i++){
            ans1[i] = ans[i];
        }
        return ans1;
    }
}